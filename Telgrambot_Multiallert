from config import *
from trading_functions import *
import webbrowser
import time
import telegram
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext
import threading



bot = telegram.Bot(token=TELEGRAM_TOKEN)


# Stati della conversazione
SYMBOL, PRICE_ALERT = range(2)

# Lista per mantenere traccia degli alert attivi
active_alerts = []

# Funzione di monitoraggio del prezzo
def monitor_price(symbol: str, prezzo_allert: float, chat_id: int):
    categoria = 'linear'
    prezzo_attuale = vedi_prezzo_moneta(categoria, symbol)
    if prezzo_attuale<=prezzo_allert:
        tipo = True
    else: 
        tipo = False
    while tipo == True:
        prezzo_attuale = vedi_prezzo_moneta(categoria, symbol)
        print(f"Inizio monitoraggio per {symbol}")

        if prezzo_allert <= prezzo_attuale:
            messaggio = f"Il prezzo di {symbol} è arrivato a {prezzo_allert}!"
            print(messaggio)
            webbrowser.open_new('https://www.bybit.com/trade/usdt/' + symbol)
            bot.send_message(chat_id=chat_id, text=messaggio)
            break

        print(f"Il prezzo di {symbol} NON è arrivato a target...")
        print('Prezzo attuale: ', prezzo_attuale)
        print('Prezzo allert: ', prezzo_allert)
        time.sleep(60)

    print(f"Fine monitoraggio per {symbol}")

    while tipo == False:
        prezzo_attuale = vedi_prezzo_moneta(categoria, symbol)
        print(f"Inizio monitoraggio per {symbol}")

        if prezzo_attuale <= prezzo_allert:
            messaggio = f"Il prezzo di {symbol} è arrivato a {prezzo_allert}!"
            print(messaggio)
            webbrowser.open_new('https://www.bybit.com/trade/usdt/' + symbol)
            bot.send_message(chat_id=chat_id, text=messaggio)
            break

        print(f"Il prezzo di {symbol} NON è arrivato a target...")
        print('Prezzo attuale: ', prezzo_attuale)
        print('Prezzo allert: ', prezzo_allert)
        time.sleep(60)

    print(f"Fine monitoraggio per {symbol}")

# Funzione di avvio
def start(update, context):
    update.message.reply_text('Ciao! Inserisci il simbolo della moneta per l\'allerta:')
    return SYMBOL

# Funzione per gestire l'inserimento del simbolo
def set_symbol(update, context):
    context.user_data['symbol'] = update.message.text
    update.message.reply_text('Inserisci il prezzo di allerta:')
    return PRICE_ALERT

# Funzione per gestire l'inserimento del prezzo di allerta
def set_price_alert(update, context):
    context.user_data['prezzo_allert'] = float(update.message.text)
    chat_id = update.message.chat_id
    symbol = context.user_data['symbol']
    prezzo_allert = context.user_data['prezzo_allert']

    # Aggiungi l'alert attivo alla lista degli alert
    active_alerts.append({'symbol': symbol, 'prezzo_allert': prezzo_allert, 'chat_id': chat_id})

    # Avvia il monitoraggio del prezzo per l'alert aggiunto
    threading.Thread(target=monitor_price, args=(symbol, prezzo_allert, chat_id)).start()

    update.message.reply_text(f"Allert per {symbol} impostato a {prezzo_allert}")

    # Ripristina lo stato della conversazione e termina la conversazione
    return ConversationHandler.END

# Funzione per annullare la conversazione
def cancel(update, context):
    update.message.reply_text('Operazione annullata.')
    # Ripristina lo stato della conversazione e termina la conversazione
    return ConversationHandler.END

# Funzione per mostrare tutti gli alert attivi
def show_alerts(update, context):
    if active_alerts:
        message = "Alert attivi:\n"
        for alert_data in active_alerts:
            symbol = alert_data['symbol']
            prezzo_allert = alert_data['prezzo_allert']
            prezzo_attuale = vedi_prezzo_moneta('linear', symbol)
            message += f"Simbolo: {symbol}, Prezzo attuale: {prezzo_attuale}, Prezzo allert: {prezzo_allert}\n"
    else:
        message = "Nessun alert attivo al momento."
    
    update.message.reply_text(message)


# Funzione principale per avviare il bot
def main():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SYMBOL: [MessageHandler(Filters.text & ~Filters.command, set_symbol)],
            PRICE_ALERT: [MessageHandler(Filters.text & ~Filters.command, set_price_alert)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    dp.add_handler(conv_handler)
    # Aggiungi il gestore del comando /show_alerts al dispatcher
    dp.add_handler(CommandHandler('show', show_alerts))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()